{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\n\nclass ProductBrandRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async findAll() {\n    return await Repository.get(`${baseUrl}/productBrand/findAll`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async findById(payload) {\n    return await Repository.get(`${baseUrl}/productBrand/findById{id}?id=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async saveProductBrand(payload) {\n    return await Repository.post(`${baseUrl}/productBrand/save`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async updateProductBrand(payload) {\n    return await Repository.put(`${baseUrl}/productBrand/update`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async deleteProductBrand(payload) {\n    return await Repository.put(`${baseUrl}/productBrand/delete{id}?id=${payload}`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n}\n\nexport default new ProductBrandRepository();","map":null,"metadata":{},"sourceType":"module"}