{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\n\nclass VendorRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async findAll(page, size, token) {\n    return await Repository.get(`${baseUrl}/vendor/findAll?page=${page}&size=${size}`, {\n      headers: {\n        Authorization: token\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async findById(payload, token) {\n    return await Repository.get(`${baseUrl}/vendor/findById{vendorId}?vendorId=${payload}`, {\n      headers: {\n        Authorization: token\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async saveVendor(payload) {\n    return await Repository.post(`${baseUrl}/vendor/signup`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async updateVendor(payload, accessToken) {\n    return await Repository.put(`${baseUrl}/vendor/updateVendor`, payload, {\n      headers: {\n        Authorization: accessToken\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async deleteVendor(payload) {\n    return await Repository.put(`${baseUrl}/vendor/deleteVendor{vendorId}?vendorId=${payload}`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n}\n\nexport default new VendorRepository();","map":{"version":3,"sources":["/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/repositories/VendorRepository.js"],"names":["Repository","baseUrl","VendorRepository","constructor","callback","findAll","page","size","token","get","headers","Authorization","then","response","data","catch","error","JSON","stringify","message","findById","payload","saveVendor","post","updateVendor","accessToken","put","deleteVendor"],"mappings":"AAAA,OAAOA,UAAP,IAAoBC,OAApB,QAAkC,cAAlC;;AAEA,MAAMC,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAED,QAAMC,OAAN,CAAcC,IAAd,EAAmBC,IAAnB,EAAwBC,KAAxB,EAA+B;AAC3B,WAAO,MAAMR,UAAU,CAACS,GAAX,CAAgB,GAAER,OAAQ,wBAAuBK,IAAK,SAAQC,IAAK,EAAnE,EAAqE;AAC9EG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAEH;AADV;AADqE,KAArE,EAKZI,IALY,CAKNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAPY,EAQZC,KARY,CAQLC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CARM,CAAb;AASH;;AAED,QAAMC,QAAN,CAAeC,OAAf,EAAuBb,KAAvB,EAA8B;AAC1B,WAAO,MAAMR,UAAU,CAACS,GAAX,CAAgB,GAAER,OAAQ,uCAAsCoB,OAAQ,EAAxE,EAA0E;AACnFX,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAEH;AADV;AAD0E,KAA1E,EAKZI,IALY,CAKNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAPY,EAQZC,KARY,CAQLC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CARM,CAAb;AASH;;AAED,QAAMG,UAAN,CAAiBD,OAAjB,EAAyB;AACrB,WAAO,MAAMrB,UAAU,CAACuB,IAAX,CAAiB,GAAEtB,OAAQ,gBAA3B,EAA2CoB,OAA3C,EACZT,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AAED,QAAMK,YAAN,CAAmBH,OAAnB,EAA2BI,WAA3B,EAAuC;AACnC,WAAO,MAAMzB,UAAU,CAAC0B,GAAX,CAAgB,GAAEzB,OAAQ,sBAA1B,EAAgDoB,OAAhD,EAAwD;AACjEX,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAEc;AADV;AADwD,KAAxD,EAKZb,IALY,CAKNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAPY,EAQZC,KARY,CAQLC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CARM,CAAb;AASH;;AACD,QAAMQ,YAAN,CAAmBN,OAAnB,EAA2B;AACvB,WAAO,MAAMrB,UAAU,CAAC0B,GAAX,CAAgB,GAAEzB,OAAQ,2CAA0CoB,OAAQ,EAA5E,EAA8EA,OAA9E,EACZT,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AAtDkB;;AAyDvB,eAAe,IAAIjB,gBAAJ,EAAf","sourcesContent":["import Repository, {baseUrl} from './Repository';\n\nclass VendorRepository {\n    constructor(callback) {\n        this.callback = callback;\n    }\n\n    async findAll(page,size,token) {\n        return await Repository.get(`${baseUrl}/vendor/findAll?page=${page}&size=${size}`,{\n            headers: {\n                Authorization: token,\n            },\n        })\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async findById(payload,token) {\n        return await Repository.get(`${baseUrl}/vendor/findById{vendorId}?vendorId=${payload}`,{\n            headers: {\n                Authorization: token,\n            },\n        })\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async saveVendor(payload){\n        return await Repository.post(`${baseUrl}/vendor/signup`,payload)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async updateVendor(payload,accessToken){\n        return await Repository.put(`${baseUrl}/vendor/updateVendor`,payload,{\n            headers: {\n                Authorization: accessToken,\n            },\n        })\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n    async deleteVendor(payload){\n        return await Repository.put(`${baseUrl}/vendor/deleteVendor{vendorId}?vendorId=${payload}`,payload)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n}\n\nexport default new VendorRepository();\n"]},"metadata":{},"sourceType":"module"}