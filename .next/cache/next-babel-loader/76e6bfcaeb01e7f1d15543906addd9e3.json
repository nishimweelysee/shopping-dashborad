{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper';\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nexport const makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nconst persistConfig = {\n  key: 'user',\n  storage,\n  blacklist: ['isLoggedIn']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction configureStore(initialState) {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(persistedReducer, initialState, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}\n\nexport const wrapper = createWrapper(configureStore, {\n  debug: false\n});","map":{"version":3,"sources":["/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/store/store.js"],"names":["applyMiddleware","createStore","createSagaMiddleware","persistReducer","storage","rootReducer","rootSaga","createWrapper","bindMiddleware","middleware","composeWithDevTools","require","makeStore","context","sagaMiddleware","store","sagaTask","run","persistConfig","key","blacklist","persistedReducer","configureStore","initialState","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,aAAT,QAA8B,oBAA9B;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACnC,YAA2C;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACV,eAAe,CAAC,GAAGS,UAAJ,CAAhB,CAA1B;AACH;;AACD,SAAOT,eAAe,CAAC,GAAGS,UAAJ,CAAtB;AACH,CAND;;AAQA,OAAO,MAAMG,SAAS,GAAIC,OAAD,IAAa;AAClC,QAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,QAAMa,KAAK,GAAGd,WAAW,CAACI,WAAD,EAAcG,cAAc,CAAC,CAACM,cAAD,CAAD,CAA5B,CAAzB;AAEAC,EAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBX,QAAnB,CAAjB;AAEA,SAAOS,KAAP;AACH,CAPM;AASP,MAAMG,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBf,EAAAA,OAFkB;AAGlBgB,EAAAA,SAAS,EAAE,CAAC,YAAD;AAHO,CAAtB;AAMA,MAAMC,gBAAgB,GAAGlB,cAAc,CAACe,aAAD,EAAgBb,WAAhB,CAAvC;;AAEA,SAASiB,cAAT,CAAwBC,YAAxB,EAAsC;AAClC,QAAMT,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,QAAMa,KAAK,GAAGd,WAAW,CACrBoB,gBADqB,EAErBE,YAFqB,EAGrBf,cAAc,CAAC,CAACM,cAAD,CAAD,CAHO,CAAzB;AAKAC,EAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBX,QAAnB,CAAjB;AACA,SAAOS,KAAP;AACH;;AAED,OAAO,MAAMS,OAAO,GAAGjB,aAAa,CAACe,cAAD,EAAgB;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAhB,CAA7B","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper';\n\nconst bindMiddleware = (middleware) => {\n    if (process.env.NODE_ENV !== 'production') {\n        const { composeWithDevTools } = require('redux-devtools-extension');\n        return composeWithDevTools(applyMiddleware(...middleware));\n    }\n    return applyMiddleware(...middleware);\n};\n\nexport const makeStore = (context) => {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(rootReducer, bindMiddleware([sagaMiddleware]));\n\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n\nconst persistConfig = {\n    key: 'user',\n    storage,\n    blacklist: ['isLoggedIn']\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction configureStore(initialState) {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(\n        persistedReducer,\n        initialState,\n        bindMiddleware([sagaMiddleware])\n    );\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n}\n\nexport const wrapper = createWrapper(configureStore,{ debug: false });"]},"metadata":{},"sourceType":"module"}