{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { route } from 'next/dist/next-server/server/router';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { useStore } from 'react-redux';\nimport routeConfig from './RouteConfig';\n\nconst withAuth = Component => allowedRole => props => {\n  // getting the auth state from redux store\n  const store = useStore();\n  const {\n    isLoggedIn,\n    user\n  } = store.getState().auth;\n  const role = user.data && user.data.user.category;\n  const router = useRouter(); // using a state to keep track if user is in correct state or path\n\n  const {\n    0: isValidRoute,\n    1: setIsValidRoute\n  } = useState(false);\n  useEffect(() => {\n    // first condition is to check if logged in and if on wrong path\n    // then route to default route of the particular role user is of\n    if (isLoggedIn && (allowedRole.indexOf(role) == -1 || !routeConfig[role][router.pathname])) {\n      setIsValidRoute(false);\n      router.push(routeConfig[role].default);\n    } // second condition is to check if not logged in and if on wrong path\n    // then route to default not authenticated path\n    else if (!isLoggedIn && !routeConfig.auth[router.pathname]) {\n        setIsValidRoute(false);\n        router.push(routeConfig.auth.default);\n      } // if upper two conditions are not met then the route user is in correct and return the component\n      else setIsValidRoute(true);\n  }, []);\n  return isValidRoute ? /*#__PURE__*/_jsx(Component, _objectSpread({}, props)) : null;\n};\n\nexport default withAuth;","map":null,"metadata":{},"sourceType":"module"}