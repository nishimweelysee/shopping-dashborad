{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\n\nclass VendorRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async findAll(page, size) {\n    return await Repository.get(`${baseUrl}/vendor/findAll?page=${page}&size=${size}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async findById(payload) {\n    console.log(payload);\n    return await Repository.get(`${baseUrl}/vendor/findById{vendorId}?vendorId=${payload}`).then(response => {\n      console.log(response);\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async saveVendor(payload) {\n    console.log(payload);\n    return await Repository.post(`${baseUrl}/vendor/signup`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async updateVendor(payload, accessToken) {\n    return await Repository.put(`${baseUrl}/vendor/updateVendor`, payload, {\n      headers: {\n        Authorization: accessToken\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async deleteVendor(payload) {\n    return await Repository.put(`${baseUrl}/vendor/deleteVendor{vendorId}?vendorId=${payload}`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n}\n\nexport default new VendorRepository();","map":null,"metadata":{},"sourceType":"module"}