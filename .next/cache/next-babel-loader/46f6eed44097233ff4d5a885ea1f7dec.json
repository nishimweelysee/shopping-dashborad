{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\n\nclass ProductRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async findAll(page, size) {\n    return await Repository.get(`${baseUrl}/product/findAll?page=${page}&size=${size}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async findById(payload) {\n    return await Repository.get(`${baseUrl}/product/findByProductId{id}?id=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async saveProduct(payload) {\n    console.log(payload);\n    return await Repository.post(`${baseUrl}/product/save`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async updateProduct(payload) {\n    return await Repository.put(`${baseUrl}/product/update`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async deleteProduct(payload) {\n    return await Repository.put(`${baseUrl}/product/deleting{productId}?productId=${payload}`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n}\n\nexport default new ProductRepository();","map":null,"metadata":{},"sourceType":"module"}