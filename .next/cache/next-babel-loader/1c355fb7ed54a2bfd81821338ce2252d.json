{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/helpers/withAuth.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { route } from 'next/dist/next-server/server/router';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { useStore } from 'react-redux';\nimport { logOut } from '~/store/auth/action';\nimport routeConfig from './RouteConfig';\n\nconst withAuth = Component => allowedRole => props => {\n  // getting the auth state from redux store\n  const store = useStore();\n  const {\n    isLoggedIn,\n    user\n  } = store.getState().auth;\n  const role = user.data && user.data.user.category;\n  const router = useRouter(); // using a state to keep track if user is in correct state or path\n\n  const {\n    0: isValidRoute,\n    1: setIsValidRoute\n  } = useState(false);\n  useEffect(() => {\n    const jwtPayload = JSON.parse(window.atob(user.accessToken.split('.')[1]));\n    let dateNow = new Date();\n\n    if (jwtPayload.exp * 1000 < dateNow.getTime()) {\n      localStorage.removeItem('ikimina');\n      props.dispatch(logOut());\n    } // first condition is to check if logged in and if on wrong path\n    // then route to default route of the particular role user is of\n\n\n    if (isLoggedIn && (allowedRole.indexOf(role) == -1 || !routeConfig[role][router.pathname])) {\n      setIsValidRoute(false);\n      router.push(routeConfig[role].default);\n    } // second condition is to check if not logged in and if on wrong path\n    // then route to default not authenticated path\n    else if (!isLoggedIn && !routeConfig.auth[router.pathname]) {\n        setIsValidRoute(false);\n        router.push(routeConfig.auth.default);\n      } // if upper two conditions are not met then the route user is in correct and return the component\n      else setIsValidRoute(true);\n  }, []);\n  return isValidRoute ? /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 25\n  }, this) : null;\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/helpers/withAuth.js"],"names":["route","useRouter","React","useEffect","useState","useStore","logOut","routeConfig","withAuth","Component","allowedRole","props","store","isLoggedIn","user","getState","auth","role","data","category","router","isValidRoute","setIsValidRoute","jwtPayload","JSON","parse","window","atob","accessToken","split","dateNow","Date","exp","getTime","localStorage","removeItem","dispatch","indexOf","pathname","push","default"],"mappings":";;;;;;;;;AAAA,SAASA,KAAT,QAAsB,qCAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,QAAQ,GAAIC,SAAD,IAAgBC,WAAD,IAAkBC,KAAD,IAAW;AAC1D;AACA,QAAMC,KAAK,GAAGP,QAAQ,EAAtB;AACA,QAAM;AAACQ,IAAAA,UAAD;AAAYC,IAAAA;AAAZ,MAAmBF,KAAK,CAACG,QAAN,GAAiBC,IAA1C;AACA,QAAMC,IAAI,GAAGH,IAAI,CAACI,IAAL,IAAaJ,IAAI,CAACI,IAAL,CAAUJ,IAAV,CAAeK,QAAzC;AACA,QAAMC,MAAM,GAAGnB,SAAS,EAAxB,CAL0D,CAO1D;;AACA,QAAM;AAAA,OAACoB,YAAD;AAAA,OAAeC;AAAf,MAAkClB,QAAQ,CAAC,KAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYb,IAAI,CAACc,WAAL,CAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAZ,CAAX,CAAnB;AACA,QAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;;AACA,QAAIR,UAAU,CAACS,GAAX,GAAiB,IAAjB,GAAwBF,OAAO,CAACG,OAAR,EAA5B,EAA+C;AAC7CC,MAAAA,YAAY,CAACC,UAAb,CAAwB,SAAxB;AACAxB,MAAAA,KAAK,CAACyB,QAAN,CAAe9B,MAAM,EAArB;AACD,KANa,CAOd;AACA;;;AACA,QAAKO,UAAU,KAAKH,WAAW,CAAC2B,OAAZ,CAAoBpB,IAApB,KAA6B,CAAC,CAA9B,IAAmC,CAACV,WAAW,CAACU,IAAD,CAAX,CAAkBG,MAAM,CAACkB,QAAzB,CAAzC,CAAf,EAA6F;AAC3FhB,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,MAAAA,MAAM,CAACmB,IAAP,CAAYhC,WAAW,CAACU,IAAD,CAAX,CAAkBuB,OAA9B;AACD,KAHD,CAKA;AACA;AANA,SAOK,IAAI,CAAC3B,UAAD,IAAe,CAACN,WAAW,CAACS,IAAZ,CAAiBI,MAAM,CAACkB,QAAxB,CAApB,EAAuD;AAC1DhB,QAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,QAAAA,MAAM,CAACmB,IAAP,CAAYhC,WAAW,CAACS,IAAZ,CAAiBwB,OAA7B;AACD,OAHI,CAKL;AALK,WAMAlB,eAAe,CAAC,IAAD,CAAf;AACN,GAvBQ,EAuBN,EAvBM,CAAT;AAyBA,SAAOD,YAAY,gBAAG,QAAC,SAAD,oBAAeV,KAAf;AAAA;AAAA;AAAA;AAAA,UAAH,GAA8B,IAAjD;AACD,CApCD;;AAsCA,eAAeH,QAAf","sourcesContent":["import { route } from 'next/dist/next-server/server/router';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { useStore} from 'react-redux';\nimport { logOut } from '~/store/auth/action';\nimport routeConfig from './RouteConfig';\n\nconst withAuth = (Component) => (allowedRole) => (props) => {\n  // getting the auth state from redux store\n  const store = useStore();\n  const {isLoggedIn,user}= store.getState().auth;\n  const role = user.data && user.data.user.category;\n  const router = useRouter();\n\n  // using a state to keep track if user is in correct state or path\n  const [isValidRoute, setIsValidRoute] = useState(false);\n\n  useEffect(() => {\n    const jwtPayload = JSON.parse(window.atob(user.accessToken.split('.')[1]));\n    let dateNow = new Date();\n    if (jwtPayload.exp * 1000 < dateNow.getTime()) {\n      localStorage.removeItem('ikimina');\n      props.dispatch(logOut());\n    }\n    // first condition is to check if logged in and if on wrong path\n    // then route to default route of the particular role user is of\n    if ( isLoggedIn && (allowedRole.indexOf(role) == -1 || !routeConfig[role][router.pathname])) {\n      setIsValidRoute(false);\n      router.push(routeConfig[role].default);\n    }\n\n    // second condition is to check if not logged in and if on wrong path\n    // then route to default not authenticated path\n    else if (!isLoggedIn && !routeConfig.auth[router.pathname]) {\n      setIsValidRoute(false);\n      router.push(routeConfig.auth.default);\n    }\n\n    // if upper two conditions are not met then the route user is in correct and return the component\n    else setIsValidRoute(true);\n  }, []);\n\n  return isValidRoute ? <Component {...props} /> : null;\n};\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}