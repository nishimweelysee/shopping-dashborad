{"ast":null,"code":"import _defineProperty from \"/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/helpers/withAuth.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { route } from 'next/dist/next-server/server/router';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { useStore } from 'react-redux';\nimport { logOut } from '~/store/auth/action';\nimport routeConfig from './RouteConfig';\n\nvar withAuth = function withAuth(Component) {\n  return function (allowedRole) {\n    var _s = $RefreshSig$();\n\n    return _s(function (props) {\n      _s();\n\n      // getting the auth state from redux store\n      var store = useStore();\n      var _store$getState$auth = store.getState().auth,\n          isLoggedIn = _store$getState$auth.isLoggedIn,\n          user = _store$getState$auth.user;\n      var role = user.data && user.data.user.category;\n      var router = useRouter(); // using a state to keep track if user is in correct state or path\n\n      var _useState = useState(false),\n          isValidRoute = _useState[0],\n          setIsValidRoute = _useState[1];\n\n      useEffect(function () {\n        var jwtPayload = JSON.parse(window.atob(user.accessToken.split('.')[1]));\n        var dateNow = new Date();\n        console.log(jwtPayload, jwtPayload.exp * 100, dateNow.getTime());\n\n        if (jwtPayload.exp < dateNow.getTime()) {\n          console.log(props);\n          localStorage.removeItem('ikimina');\n          props.dispatch(logOut());\n        } // first condition is to check if logged in and if on wrong path\n        // then route to default route of the particular role user is of\n\n\n        if (isLoggedIn && (allowedRole.indexOf(role) == -1 || !routeConfig[role][router.pathname])) {\n          setIsValidRoute(false);\n          router.push(routeConfig[role][\"default\"]);\n        } // second condition is to check if not logged in and if on wrong path\n        // then route to default not authenticated path\n        else if (!isLoggedIn && !routeConfig.auth[router.pathname]) {\n            setIsValidRoute(false);\n            router.push(routeConfig.auth[\"default\"]);\n          } // if upper two conditions are not met then the route user is in correct and return the component\n          else setIsValidRoute(true);\n      }, []);\n      return isValidRoute ? /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, _this) : null;\n    }, \"83s2kWY6uTr2qgaYGtLn0qWOdj0=\", false, function () {\n      return [useStore, useRouter];\n    });\n  };\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/helpers/withAuth.js"],"names":["route","useRouter","React","useEffect","useState","useStore","logOut","routeConfig","withAuth","Component","allowedRole","props","store","getState","auth","isLoggedIn","user","role","data","category","router","isValidRoute","setIsValidRoute","jwtPayload","JSON","parse","window","atob","accessToken","split","dateNow","Date","console","log","exp","getTime","localStorage","removeItem","dispatch","indexOf","pathname","push"],"mappings":";;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,qCAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD;AAAA,SAAe,UAACC,WAAD;AAAA;;AAAA,cAAiB,UAACC,KAAD,EAAW;AAAA;;AAC1D;AACA,UAAMC,KAAK,GAAGP,QAAQ,EAAtB;AAF0D,iCAGjCO,KAAK,CAACC,QAAN,GAAiBC,IAHgB;AAAA,UAGnDC,UAHmD,wBAGnDA,UAHmD;AAAA,UAGxCC,IAHwC,wBAGxCA,IAHwC;AAI1D,UAAMC,IAAI,GAAGD,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAUF,IAAV,CAAeG,QAAzC;AACA,UAAMC,MAAM,GAAGnB,SAAS,EAAxB,CAL0D,CAO1D;;AAP0D,sBAQlBG,QAAQ,CAAC,KAAD,CARU;AAAA,UAQnDiB,YARmD;AAAA,UAQrCC,eARqC;;AAU1DnB,MAAAA,SAAS,CAAC,YAAM;AACd,YAAMoB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYX,IAAI,CAACY,WAAL,CAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAZ,CAAX,CAAnB;AACA,YAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ,EAAuBA,UAAU,CAACW,GAAX,GAAiB,GAAxC,EAA4CJ,OAAO,CAACK,OAAR,EAA5C;;AACA,YAAIZ,UAAU,CAACW,GAAX,GAAkBJ,OAAO,CAACK,OAAR,EAAtB,EAAyC;AACvCH,UAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACAyB,UAAAA,YAAY,CAACC,UAAb,CAAwB,SAAxB;AACA1B,UAAAA,KAAK,CAAC2B,QAAN,CAAehC,MAAM,EAArB;AACD,SARa,CASd;AACA;;;AACA,YAAKS,UAAU,KAAKL,WAAW,CAAC6B,OAAZ,CAAoBtB,IAApB,KAA6B,CAAC,CAA9B,IAAmC,CAACV,WAAW,CAACU,IAAD,CAAX,CAAkBG,MAAM,CAACoB,QAAzB,CAAzC,CAAf,EAA6F;AAC3FlB,UAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,UAAAA,MAAM,CAACqB,IAAP,CAAYlC,WAAW,CAACU,IAAD,CAAX,WAAZ;AACD,SAHD,CAKA;AACA;AANA,aAOK,IAAI,CAACF,UAAD,IAAe,CAACR,WAAW,CAACO,IAAZ,CAAiBM,MAAM,CAACoB,QAAxB,CAApB,EAAuD;AAC1DlB,YAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,YAAAA,MAAM,CAACqB,IAAP,CAAYlC,WAAW,CAACO,IAAZ,WAAZ;AACD,WAHI,CAKL;AALK,eAMAQ,eAAe,CAAC,IAAD,CAAf;AACN,OAzBQ,EAyBN,EAzBM,CAAT;AA2BA,aAAOD,YAAY,gBAAG,QAAC,SAAD,oBAAeV,KAAf;AAAA;AAAA;AAAA;AAAA,eAAH,GAA8B,IAAjD;AACD,KAtC+B;AAAA,cAEhBN,QAFgB,EAKfJ,SALe;AAAA;AAAA,GAAf;AAAA,CAAjB;;AAwCA,eAAeO,QAAf","sourcesContent":["import { route } from 'next/dist/next-server/server/router';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { useStore} from 'react-redux';\nimport { logOut } from '~/store/auth/action';\nimport routeConfig from './RouteConfig';\n\nconst withAuth = (Component) => (allowedRole) => (props) => {\n  // getting the auth state from redux store\n  const store = useStore();\n  const {isLoggedIn,user}= store.getState().auth;\n  const role = user.data && user.data.user.category;\n  const router = useRouter();\n\n  // using a state to keep track if user is in correct state or path\n  const [isValidRoute, setIsValidRoute] = useState(false);\n\n  useEffect(() => {\n    const jwtPayload = JSON.parse(window.atob(user.accessToken.split('.')[1]));\n    let dateNow = new Date();\n    console.log(jwtPayload,jwtPayload.exp * 100,dateNow.getTime());\n    if (jwtPayload.exp  < dateNow.getTime()) {\n      console.log(props);\n      localStorage.removeItem('ikimina');\n      props.dispatch(logOut());\n    }\n    // first condition is to check if logged in and if on wrong path\n    // then route to default route of the particular role user is of\n    if ( isLoggedIn && (allowedRole.indexOf(role) == -1 || !routeConfig[role][router.pathname])) {\n      setIsValidRoute(false);\n      router.push(routeConfig[role].default);\n    }\n\n    // second condition is to check if not logged in and if on wrong path\n    // then route to default not authenticated path\n    else if (!isLoggedIn && !routeConfig.auth[router.pathname]) {\n      setIsValidRoute(false);\n      router.push(routeConfig.auth.default);\n    }\n\n    // if upper two conditions are not met then the route user is in correct and return the component\n    else setIsValidRoute(true);\n  }, []);\n\n  return isValidRoute ? <Component {...props} /> : null;\n};\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}