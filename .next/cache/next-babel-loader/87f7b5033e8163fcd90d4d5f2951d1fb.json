{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\n\nclass ProductBrandRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async findAll() {\n    return await Repository.get(`${baseUrl}/productBrand/findAll`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async findById(payload) {\n    return await Repository.get(`${baseUrl}/productBrand/findById{id}?id=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async saveProductBrand(payload, token) {\n    return await Repository.post(`${baseUrl}/productBrand/save`, payload, {\n      headers: {\n        Authorization: `${token}`\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async updateProductBrand(payload, token) {\n    return await Repository.put(`${baseUrl}/productBrand/update`, payload, {\n      headers: {\n        Authorization: `${token}`\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async deleteProductBrand(payload, token) {\n    return await Repository.put(`${baseUrl}/productBrand/delete{id}?id=${payload}`, payload, {\n      headers: {\n        Authorization: `${token}`\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n}\n\nexport default new ProductBrandRepository();","map":{"version":3,"sources":["/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/repositories/ProductBrandRepository.js"],"names":["Repository","baseUrl","ProductBrandRepository","constructor","callback","findAll","get","then","response","data","catch","error","JSON","stringify","message","findById","payload","saveProductBrand","token","post","headers","Authorization","updateProductBrand","put","deleteProductBrand"],"mappings":"AAAA,OAAOA,UAAP,IAAoBC,OAApB,QAAkC,cAAlC;;AAEA,MAAMC,sBAAN,CAA6B;AACzBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAED,QAAMC,OAAN,GAAgB;AACZ,WAAO,MAAML,UAAU,CAACM,GAAX,CAAgB,GAAEL,OAAQ,uBAA1B,EACZM,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AAED,QAAMC,QAAN,CAAeC,OAAf,EAAwB;AACpB,WAAO,MAAMhB,UAAU,CAACM,GAAX,CAAgB,GAAEL,OAAQ,iCAAgCe,OAAQ,EAAlE,EACZT,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AAED,QAAMG,gBAAN,CAAuBD,OAAvB,EAA+BE,KAA/B,EAAqC;AACjC,WAAO,MAAMlB,UAAU,CAACmB,IAAX,CAAiB,GAAElB,OAAQ,oBAA3B,EAA+Ce,OAA/C,EAAuD;AAChEI,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,GAAEH,KAAM;AADnB;AADuD,KAAvD,EAKZX,IALY,CAKNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAPY,EAQZC,KARY,CAQLC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CARM,CAAb;AASH;;AAED,QAAMQ,kBAAN,CAAyBN,OAAzB,EAAiCE,KAAjC,EAAuC;AACnC,WAAO,MAAMlB,UAAU,CAACuB,GAAX,CAAgB,GAAEtB,OAAQ,sBAA1B,EAAgDe,OAAhD,EAAwD;AACjEI,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,GAAEH,KAAM;AADnB;AADwD,KAAxD,EAKZX,IALY,CAKNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAPY,EAQZC,KARY,CAQLC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CARM,CAAb;AASH;;AAED,QAAMU,kBAAN,CAAyBR,OAAzB,EAAiCE,KAAjC,EAAuC;AACnC,WAAO,MAAMlB,UAAU,CAACuB,GAAX,CAAgB,GAAEtB,OAAQ,+BAA8Be,OAAQ,EAAhE,EAAkEA,OAAlE,EAA0E;AACnFI,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,GAAEH,KAAM;AADnB;AAD0E,KAA1E,EAKZX,IALY,CAKNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAPY,EAQZC,KARY,CAQLC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CARM,CAAb;AASH;;AAvDwB;;AA0D7B,eAAe,IAAIZ,sBAAJ,EAAf","sourcesContent":["import Repository, {baseUrl} from './Repository';\n\nclass ProductBrandRepository {\n    constructor(callback) {\n        this.callback = callback;\n    }\n\n    async findAll() {\n        return await Repository.get(`${baseUrl}/productBrand/findAll`)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async findById(payload) {\n        return await Repository.get(`${baseUrl}/productBrand/findById{id}?id=${payload}`)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async saveProductBrand(payload,token){\n        return await Repository.post(`${baseUrl}/productBrand/save`,payload,{\n            headers: {\n                Authorization: `${token}`,\n            },\n        })\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async updateProductBrand(payload,token){\n        return await Repository.put(`${baseUrl}/productBrand/update`,payload,{\n            headers: {\n                Authorization: `${token}`,\n            },\n        })\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n    \n    async deleteProductBrand(payload,token){\n        return await Repository.put(`${baseUrl}/productBrand/delete{id}?id=${payload}`,payload,{\n            headers: {\n                Authorization: `${token}`,\n            },\n        })\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n}\n\nexport default new ProductBrandRepository();\n"]},"metadata":{},"sourceType":"module"}