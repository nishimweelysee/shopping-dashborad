{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\n\nclass ProductRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async findAll(page, size) {\n    return await Repository.get(`${baseUrl}/product/findAll?page=${page}&size=${size}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async findById(payload) {\n    return await Repository.get(`${baseUrl}/product/findByProductId{id}?id=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async saveProduct(payload) {\n    console.log(payload);\n    return await Repository.post(`${baseUrl}/product/save`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async updateProduct(payload) {\n    return await Repository.put(`${baseUrl}/product/update`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n  async deleteProduct(payload) {\n    return await Repository.put(`${baseUrl}/product/deleting{productId}?productId=${payload}`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error.message)\n    }));\n  }\n\n}\n\nexport default new ProductRepository();","map":{"version":3,"sources":["/Users/nishimweelysee/Desktop/eshopping/martfury-admin-react/repositories/ProductRepository.js"],"names":["Repository","baseUrl","ProductRepository","constructor","callback","findAll","page","size","get","then","response","data","catch","error","JSON","stringify","message","findById","payload","saveProduct","console","log","post","updateProduct","put","deleteProduct"],"mappings":"AAAA,OAAOA,UAAP,IAAoBC,OAApB,QAAkC,cAAlC;;AAEA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAED,QAAMC,OAAN,CAAcC,IAAd,EAAmBC,IAAnB,EAAyB;AACrB,WAAO,MAAMP,UAAU,CAACQ,GAAX,CAAgB,GAAEP,OAAQ,yBAAwBK,IAAK,SAAQC,IAAK,EAApE,EACZE,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AAED,QAAMC,QAAN,CAAeC,OAAf,EAAwB;AACpB,WAAO,MAAMlB,UAAU,CAACQ,GAAX,CAAgB,GAAEP,OAAQ,mCAAkCiB,OAAQ,EAApE,EACZT,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AAED,QAAMG,WAAN,CAAkBD,OAAlB,EAA0B;AACtBE,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,WAAO,MAAMlB,UAAU,CAACsB,IAAX,CAAiB,GAAErB,OAAQ,eAA3B,EAA0CiB,OAA1C,EACZT,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AAED,QAAMO,aAAN,CAAoBL,OAApB,EAA4B;AACxB,WAAO,MAAMlB,UAAU,CAACwB,GAAX,CAAgB,GAAEvB,OAAQ,iBAA1B,EAA2CiB,OAA3C,EACZT,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AACD,QAAMS,aAAN,CAAoBP,OAApB,EAA4B;AACxB,WAAO,MAAMlB,UAAU,CAACwB,GAAX,CAAgB,GAAEvB,OAAQ,0CAAyCiB,OAAQ,EAA3E,EAA6EA,OAA7E,EACZT,IADY,CACNC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHY,EAIZC,KAJY,CAILC,KAAD,KAAY;AAACA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,OAArB;AAAR,KAAZ,CAJM,CAAb;AAKH;;AA3CmB;;AA8CxB,eAAe,IAAId,iBAAJ,EAAf","sourcesContent":["import Repository, {baseUrl} from './Repository';\n\nclass ProductRepository {\n    constructor(callback) {\n        this.callback = callback;\n    }\n\n    async findAll(page,size) {\n        return await Repository.get(`${baseUrl}/product/findAll?page=${page}&size=${size}`)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async findById(payload) {\n        return await Repository.get(`${baseUrl}/product/findByProductId{id}?id=${payload}`)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async saveProduct(payload){\n        console.log(payload);\n        return await Repository.post(`${baseUrl}/product/save`,payload)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n\n    async updateProduct(payload){\n        return await Repository.put(`${baseUrl}/product/update`,payload)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n    async deleteProduct(payload){\n        return await Repository.put(`${baseUrl}/product/deleting{productId}?productId=${payload}`,payload)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({error: JSON.stringify(error.message)}));\n    }\n}\n\nexport default new ProductRepository();\n"]},"metadata":{},"sourceType":"module"}